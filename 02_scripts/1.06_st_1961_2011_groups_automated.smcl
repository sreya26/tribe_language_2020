{smcl}
{txt}{sf}{ul off}{.-}
      name:  {res}plog_786
       {txt}log:  {res}/Users/sreyamajumder/Dropbox/sreya_majumder/tribelanguage_2020 sreya/02_scripts/1.06_st_1961_2011_groups_automated.smcl
  {txt}log type:  {res}smcl
 {txt}opened on:  {res}16 Nov 2021, 12:34:31
{txt}
{com}. 
. 
. ******************************************************************************************************************************************
. * this file identifies tribal (ST) groups across India using a [mostly] automated method
. * the work is first done for Census 2011, and then the same groups are used for Census 1961
. * dated: July 2020 
. ******************************************************************************************************************************************
. project, original ("../01_data/scheduled tribes list/census 1961 scheduled tribe list.xlsx") 
{txt}project version2_tribe_language > do-file uses original: {res}"01_data/scheduled tribes list/census 1961 scheduled tribe list.xlsx" filesig(1519998657:36941){txt}

{com}. project , uses("../08_temp/st_2011_state_pops.dta")
{txt}project version2_tribe_language > do-file uses: {res}"08_temp/st_2011_state_pops.dta" filesig(2995629499:636789){txt}

{com}. project , uses("../08_temp/census1961_st_religion_distcoded.dta")
{txt}project version2_tribe_language > do-file uses: {res}"08_temp/census1961_st_religion_distcoded.dta" filesig(821515967:5016107){txt}

{com}. 
. ******************************************************************************************************************************************
. * 1. define a program to clean up the tribe names
. ******************************************************************************************************************************************
. capture program drop clean_tribe
{txt}
{com}. program define clean_tribe
{txt}  1{com}.         syntax varname(string) , GENerate(name)
{txt}  2{com}.         
.         confirm new var `generate'
{txt}  3{com}.         
.         gen `generate' = `varlist'      
{txt}  4{com}.         replace `generate' = trim(itrim(lower(`generate')))
{txt}  5{com}.         
.         *********************************************************************************************************************
.         * 1.1 things to remove:
.         *********************************************************************************************************************
.         
.         local roman i ii iii iv v vi vii viii ix x xi xii xiii xiv xv xvi xvii xviii xix xx ///
>                                 xxi xxii xxiii xxiv xxv xxvi xxvii xxviii xxix xxx xxxi xxxii xxxiii xxxiv xxxv xxxvi xxxvii
{txt}  6{com}.         foreach numeral of local roman {c -(}
{txt}  7{com}.                 local str = "(`numeral')"
{txt}  8{com}.                 replace `generate' = subinstr(`generate',"`str'",",",.)
{txt}  9{com}.                 {c )-}
{txt} 10{com}.         
.         replace `generate' = subinstr(`generate',"; ,",",",.)
{txt} 11{com}.         replace `generate' = subinstr(`generate',"*","",.)
{txt} 12{com}.         replace `generate' = subinstr(`generate',"/",",",.)
{txt} 13{com}.         replace `generate' = subinstr(`generate',", including the following sub-tribes:",", ",1)
{txt} 14{com}.         replace `generate' = subinstr(`generate'," including:",", ",1)
{txt} 15{com}.         replace `generate' = subinstr(`generate',"(including ",", ",1)
{txt} 16{com}.         replace `generate' = subinstr(`generate',"including ",", ",1)
{txt} 17{com}.         replace `generate' = subinstr(`generate'," etc."," ",.) 
{txt} 18{com}.         replace `generate' = subinstr(`generate'," in cachar","",1)
{txt} 19{com}.         replace `generate' = subinstr(`generate'," -","-",.)    
{txt} 20{com}.         replace `generate' = subinstr(`generate',"- ","-",.)
{txt} 21{com}.         
.         *********************************************************************************************************************
.         * 1.2 remove everything to the right of:
.         *********************************************************************************************************************   
.         tempvar excludepos
{txt} 22{com}.         gen `excludepos' = strpos(`generate',"excluding")
{txt} 23{com}.         replace `generate' = substr(`generate', 1, `excludepos'-2) if `excludepos' > 0
{txt} 24{com}.         replace `excludepos' = strpos(`generate',"(in ")
{txt} 25{com}.         replace `generate' = substr(`generate', 1, `excludepos'-1) if `excludepos' > 0
{txt} 26{com}.         replace `excludepos' = strpos(`generate',"[in ")
{txt} 27{com}.         replace `generate' = substr(`generate', 1, `excludepos'-1) if `excludepos' > 0
{txt} 28{com}.         replace `excludepos' = strpos(`generate',"(to be spelt")
{txt} 29{com}.         replace `generate' = substr(`generate', 1, `excludepos'-2) if `excludepos' > 0
{txt} 30{com}.         replace `excludepos' = strpos(`generate',"(tai speaking")
{txt} 31{com}.         replace `generate' = substr(`generate', 1, `excludepos'-2) if `excludepos' > 0
{txt} 32{com}.         replace `excludepos' = strpos(`generate', " minicoy")
{txt} 33{com}.         replace `generate' = substr(`generate', 1, `excludepos'-1) if `excludepos' > 0
{txt} 34{com}.         replace `excludepos' = strpos(`generate', " abor, aka, apatani, dafla, galong, khampti, khowa,mishmi, momba, naga tribes (any), sherdukpen, singpho")
{txt} 35{com}.         replace `generate' = substr(`generate', 1, `excludepos'-2) if `excludepos' > 0
{txt} 36{com}.         replace `excludepos' = strpos(`generate', " abor, aka, apatani, dafla, galong, khampti, khowa, mishmi, momba, naga tribes (any), sherdukpen and singpho")
{txt} 37{com}.         replace `generate' = substr(`generate', 1, `excludepos'-2) if `excludepos' > 0
{txt} 38{com}.         
.         *********************************************************************************************************************
.         * 1.3 remove parentheses
.         *********************************************************************************************************************   
.         
.         replace `generate' = subinstr(`generate',"("," ",.)
{txt} 39{com}.         replace `generate' = subinstr(`generate',")"," ",.)
{txt} 40{com}. 
.         *********************************************************************************************************************
.         * 1.4 replace conjunctions etc with commas
.         *********************************************************************************************************************           
. 
.         replace `generate' = subinstr(`generate', " and ", "," ,.)
{txt} 41{com}.         replace `generate' = subinstr(`generate', " or ", "," ,.)
{txt} 42{com}. 
.         *********************************************************************************************************************
.         * 1.5 sort out commas
.         *********************************************************************************************************************           
.         
.         replace `generate' = trim(itrim(`generate'))
{txt} 43{com}.         replace `generate' = subinstr(`generate'," ,",",",.)
{txt} 44{com}.         replace `generate' = subinstr(`generate',", ,",", ",.)
{txt} 45{com}.         replace `generate' = subinstr(`generate',",,",", ",.)
{txt} 46{com}. 
.         replace `generate' = trim(itrim(`generate'))
{txt} 47{com}.         replace `generate' = substr(`generate',2,.) if substr(`generate',1,1) == "," // should not start with comma
{txt} 48{com}.         replace `generate' = substr(`generate',1,length(`generate')-1) if substr(`generate',-1,1) == "," // should not end with comma   
{txt} 49{com}. end
{txt}
{com}. 
. 
. ******************************************************************************************************************************************
. * 2. now we create a program that will do most of the work of creating tribe groups 
. ******************************************************************************************************************************************
. 
. capture program drop create_tribe_groups
{txt}
{com}. program define create_tribe_groups
{txt}  1{com}.         syntax, CASTEvar(varname string) STATEvar(varname string) POPvar(varname numeric) GENGROUPvar(name) GENSYNonymvar(name)
{txt}  2{com}.         
.         confirm new var `gengroupvar' `gensynonymvar'
{txt}  3{com}.         
.         tempvar sort_order
{txt}  4{com}.         gen `sort_order' = _n
{txt}  5{com}.         
.         tempvar tribe
{txt}  6{com}.         clonevar `tribe' = `castevar'
{txt}  7{com}. 
.         split `tribe', p(, ; :) gen(_split_)
{txt}  8{com}.         ds _split_*
{txt}  9{com}.         local numsplits: word count `r(varlist)'
{txt} 10{com}. 
.         tempvar first_name
{txt} 11{com}.         
.         forvalues i=1/`numsplits' {c -(}
{txt} 12{com}.                 replace _split_`i' = trim(itrim(_split_`i'))
{txt} 13{com}.                 if `i'==1 gen `first_name' = _split_1
{txt} 14{com}.                 replace _split_`i' = subinstr(_split_`i',"-","_",.)
{txt} 15{com}.                 replace _split_`i' = trim(itrim(_split_`i'))
{txt} 16{com}.                 replace _split_`i' = subinstr(_split_`i'," ","_",.)
{txt} 17{com}.                 replace _split_`i' = trim(itrim(_split_`i'))
{txt} 18{com}.         {c )-}
{txt} 19{com}.                 
.         tempvar tribewords
{txt} 20{com}.         egen `tribewords' = concat(_split_*), punct(" ") // each synonym is space-separated; synonyms are "words", i.e. have no spaces within them
{txt} 21{com}.         drop _split_*
{txt} 22{com}. 
.         * SYNONYMS: these don't get automatically picked up by the program (mainly due to spelling differences) and are manually put in
. 
.         local group1 any_mizo_lushai_tribe any_mizo_lushai_tribes mizo_lushai_tribes_any lushai //
{txt} 23{com}.         local group2 any_naga_tribes naga_tribes_any naga kacha_naga poumai_naga //
{txt} 24{com}.         local group3 bhot jad
{txt} 25{com}.         local group4 boro boro_kacharis boro_borokachari
{txt} 26{com}.         local group5 dimasa_kachari kachari
{txt} 27{com}.         local group6 gadaba gadabas
{txt} 28{com}.         local group7 gond kotia_bentho_oriya kotia koya pardhan
{txt} 29{com}.         local group8 garo garoo
{txt} 30{com}.         local group9 jannsari jaunsari
{txt} 31{com}.         local group10 kochuvelan kochu_velan
{txt} 32{com}.         local group11 kol kol_dahait
{txt} 33{com}.         local group12 kolah_loharas kolah_kol_loharas
{txt} 34{com}.         local group13 kondareddis konda_reddis 
{txt} 35{com}.         local group14 mag magh
{txt} 36{com}.         local group15 mal_paharia mal_pahariya
{txt} 37{com}.         local group16 man man_tai_speaking
{txt} 38{com}.         local group17 muthuvan muthuwan
{txt} 39{com}.         local group18 naikda naikda_talavia
{txt} 40{com}.         local group19 paradhi pardhi
{txt} 41{com}.         local group20 parja paroja porja porja_parangiperja
{txt} 42{com}.         local group21 raba rabha
{txt} 43{com}.         local group22 santal santhal
{txt} 44{com}.         local group23 sahariya saharya
{txt} 45{com}.         local group24 sawar savar
{txt} 46{com}.         local group25 siddi siddi_nayaka
{txt} 47{com}.         local group26 singpho singhpho
{txt} 48{com}.         local group27 sugalis sugalis_lambadis
{txt} 49{com}.         local group28 synteng syntheng
{txt} 50{com}.         local group29 ulladan ulladan_hill_dwellers 
{txt} 51{com}.         local group30 vaiphui vaiphei
{txt} 52{com}.         local group31 mikir karbi // this equivalence established by the SC ST Orders Amendment Act, 2002 (see Assam change)
{txt} 53{com}.         local group32 goudu_goud goudu 
{txt} 54{com}.         local group33 kondhs_kodi kondhs 
{txt} 55{com}.         local group34 savaras_kapu_savaras savaras 
{txt} 56{com}.         local group35 malha_malasar maha_malasar //discrepancies in tribe name spellings across census volumes 
{txt} 57{com}.         local group36 sahte suhte //discrepancies in tribe name spellings across census volumes
{txt} 58{com}.         local group37 bhil bhils garasia // oraon added 
{txt} 59{com}.         local group38 koli koli_dhor koli_malhar  //added koli mahadev
{txt} 60{com}.         local group39 any_kuki_tribes kuki //added riang gangte vaiphei 
{txt} 61{com}.         local num_manual 39
{txt} 62{com}. 
.         * add the manually specified synonyms to the synonyms for relevant tribes
.         local N = _N    
{txt} 63{com}.         forval  i=1/`N' {c -(}
{txt} 64{com}.                 forval m = 1/`num_manual' {c -(}
{txt} 65{com}.                         local all_synonyms = `tribewords'[`i']
{txt} 66{com}.                         if "`:list all_synonyms & group`m''" != "" local all_synonyms: list all_synonyms | group`m'
{txt} 67{com}.                         replace `tribewords' = "`all_synonyms'" in `i'
{txt} 68{com}.                 {c )-}               
{txt} 69{com}.         {c )-}
{txt} 70{com}.         * logic:
.         * sort observations alphabetically
.         * start top-level cycle of observations from j = 1 to end       
.                 * initialize `group' to be the first synonym of `tribefull'[j]
.                 * initialize `synonyms' to be `tribefull'[j]
.                 * initialize `add_this' to `tribefull'[j]
.                 * while `add_this' ~= ""
.                         * set `add_this' = ""
.                         * cycle through all other observations i = j+1 to end 
.                                 * check if there is any overlap between `synonyms' and `tribefull'[i]
.                                         * if there is, set `synonyms' = `synonyms' | `tribefull'[i]; set `group' = `group'[j]; set `added_bit' = `tribefull'[i] - `synonyms'; set `add_this': `add_this' | `added_bit' 
.                                         * else set `add_this' = ""
.                                 * end cycle
.                         * end while loop
.                 * replace `synonyms' = local `synonyms' if `group' = `group'[j]
.                 * end top level cycle
.         
.         tempvar synonyms group group_num
{txt} 71{com}.         gen `synonyms' = ""
{txt} 72{com}.         gen `group' = ""
{txt} 73{com}.         gen `group_num' = .
{txt} 74{com}.         
.         gsort -`popvar'
{txt} 75{com}.                 
.         local group_counter = 0
{txt} 76{com}.         
.         forvalues j = 1/`N' {c -(}
{txt} 77{com}.                 if `group'[`j'] ~= "" continue
{txt} 78{com}.                 local ++group_counter
{txt} 79{com}.                 
.                 local all_synonyms = `tribewords'[`j']
{txt} 80{com}.                 local tribe_group: word 1 of `all_synonyms'
{txt} 81{com}.                 
.                 replace `group' = "`tribe_group'" in `j'
{txt} 82{com}.                 replace `group_num' = `group_counter' in `j'
{txt} 83{com}.                                 
.                 * first we collect all synonyms of this group, till there are no new ones
.                 
.                 local found_something 1 // initialize this as non-zero to enable while loop to begin
{txt} 84{com}.                 local obs_for_this_tribe // initialize to nothing
{txt} 85{com}.                 
.                 while `found_something' ~= 0 {c -(} // we want to loop over all observations until we go through a full loop without finding any synonyms
{txt} 86{com}.                         local found_something 0 // not found anything yet for this loop
{txt} 87{com}.                         forvalues i = `=`j'+1'/`N'{c -(} 
{txt} 88{com}.                                 if `group'[`i'] ~= "" continue // skip observations that are already in a group
{txt} 89{com}.                                 local this_tribe = `tribewords'[`i']
{txt} 90{com}.                                 local x: list all_synonyms & this_tribe // synonyms in both this observation and the current tribe
{txt} 91{com}.                                 if "`x'" ~= "" {c -(}   // i.e. if the observation belongs to the current tribe
{txt} 92{com}.                                         local obs_for_this_tribe: list obs_for_this_tribe | i
{txt} 93{com}.                                         local added_bit: list this_tribe - all_synonyms
{txt} 94{com}.                                         if "`added_bit'" ~= "" {c -(}
{txt} 95{com}.                                                 local found_something 1
{txt} 96{com}.                                                 local all_synonyms: list all_synonyms | this_tribe // add the synonyms from this tribe to the full list
{txt} 97{com}.                                         {c )-}
{txt} 98{com}.                                 {c )-}
{txt} 99{com}.                         {c )-}
{txt}100{com}.                 {c )-}
{txt}101{com}.                 
.                 replace `synonyms' = "`all_synonyms'" in `j'
{txt}102{com}.                                 
.                 foreach i of local obs_for_this_tribe {c -(}
{txt}103{com}.                         replace `group' = `group'[`j'] in `i'
{txt}104{com}.                         replace `group_num' = `group_counter' in `i'
{txt}105{com}.                         replace `synonyms' = "`all_synonyms'" in `i'
{txt}106{com}.                 {c )-}
{txt}107{com}.         {c )-}
{txt}108{com}.         
.         gen `gensynonymvar' = `synonyms'
{txt}109{com}.         tempvar neg_pop
{txt}110{com}.         gen `neg_pop' = -`popvar'
{txt}111{com}.         bysort `group_num' (`neg_pop'): gen `gengroupvar' = proper(`first_name'[1])
{txt}112{com}. 
.         sort `sort_order'
{txt}113{com}. end
{txt}
{com}. 
. ******************************************************************************************************************************************
. * 3. this part prepares the 1961 scheduled tribes list in order to append with 2011 data 
. * it adds total population figures for each tribe 
. ******************************************************************************************************************************************
. 
. import excel "../01_data/scheduled tribes list/census 1961 scheduled tribe list.xlsx", sheet("Sheet1") firstrow clear
{res}{text}(6 vars, 661 obs)

{com}. 
. replace tribe = strtrim(tribe)
{txt}(1 real change made)

{com}. replace tribe = lower(tribe)
{txt}(3 real changes made)

{com}. tempfile tribelist
{txt}
{com}. save `tribelist'
{txt}{p 0 4 2}
file {bf}
/var/folders/m0/4lyk4gcd0rs88ghc7sdnwc600000gn/T//S_00324.000008{rm}
saved
as .dta format
{p_end}

{com}. 
. 
. use "../08_temp/census1961_st_religion_distcoded.dta", clear
{txt}
{com}. keep dcode_1961 state_1961 tribe_code tribe area total_p
{txt}
{com}. replace tribe = strtrim(tribe)
{txt}(0 real changes made)

{com}. keep if mod(dcode_1961,100) == 0
{txt}(4,686 observations deleted)

{com}. collapse (sum) total_p , by (dcode_1961 state_1961 tribe)
{res}{txt}
{com}. drop if strpos(tribe,"aggregate")>0
{txt}(5 observations deleted)

{com}. rename state_1961 state 
{res}{txt}
{com}. merge 1:1 state tribe using `tribelist'
{res}
{txt}{col 5}Result{col 33}Number of obs
{col 5}{hline 41}
{col 5}Not matched{col 30}{res}             123
{txt}{col 9}from master{col 30}{res}               0{txt}  (_merge==1)
{col 9}from using{col 30}{res}             123{txt}  (_merge==2)

{col 5}Matched{col 30}{res}             538{txt}  (_merge==3)
{col 5}{hline 41}

{com}. 
. clonevar caste = tribe
{txt}
{com}. clonevar caste_updated = caste 
{txt}
{com}. drop tribe 
{txt}
{com}. 
. tempfile 1961_tribe
{txt}
{com}. save `1961_tribe'
{txt}{p 0 4 2}
file {bf}
/var/folders/m0/4lyk4gcd0rs88ghc7sdnwc600000gn/T//S_00324.000009{rm}
saved
as .dta format
{p_end}

{com}. 
. ******************************************************************************************************************************************
. * 3. this part prepares the 2011 scheduled tribes list in order to append with 1961 
. ******************************************************************************************************************************************
. 
. use "../08_temp/st_2011_state_pops", clear
{txt}
{com}. 
. clonevar caste_updated = caste
{txt}
{com}. 
. 
. replace caste_updated = "Any Kuki Tribes, including:  (I) Biate Or Biete (Ii) Changsan (Iii) Chongloi (Iv) Doungel (V) Gamalhou (Vi) Gangte (Vii) Guite (Viii) Hanneng (Ix) Haokip Or Haupit (X) Haolai (Xi) Hengna (Xii) Hongsungh (Xiii) Hrangkhwal Or Rangkhol (Xiv) Jongbe (Xv) Khawchung (Xvi) Khawathlang Or Khothalong (Xvii) Khelma (Xviii) Kholhou (Xix) Kipgen (Xx) Kuki (Xxi) Lengthang (Xxii) Lhangum (Xxiii) Lhoujem (Xxiv) Lhouvun (Xxv) Lupheng (Xxvi) Mangjel (Xxvii) Misao (Xxviii) Riang (Xxix) Sairhem (Xxx) Selnam (Xxxi) Singson (Xxxii) Sitlhou (Xxxiii) Sukte (Xxxiv) Thado (Xxxv) Thangngeu (Xxxvi) Uibuh (Xxxvii) Vaiphei" if caste_updated == "Any Kuki Tribes, including:" & state == "MIZORAM"
{txt}(1 real change made)

{com}. 
. replace caste_updated = "Kuki, including the following sub-tribes: i) Balte (ii) Belalhut (iii) Chhalya (iv) Fun (v) Hajango (vi) Jangtei (vii) Khareng (viii) Khephong (ix) Kuntei (x) Laifang (xi) Lentei (xii) Mizel (xiii) Namte (xiv) Paitu, Paite (xv) Rangchan (xvi) Rangkhole (xvii) Thangluya" if caste_updated == "Kuki,   including the following sub-tribes:" & state == "TRIPURA"
{txt}(1 real change made)

{com}. 
. replace caste_updated = "Any Kuki Tribes, including:  (I) Biate Or Biete (Ii) Changsan (Iii) Chongloi (Iv) Doungel (V) Gamalhou (Vi) Gangte (Vii) Guite (Viii) Hanneng (Ix) Haokip Or Haupit (X) Haolai (Xi) Hengna (Xii) Hongsungh (Xiii) Hrangkhwal Or Rangkhol (Xiv) Jongbe (Xv) Khawchung (Xvi) Khawathlang Or Khothalong (Xvii) Khelma (Xviii) Kholhou (Xix) Kipgen (Xx) Kuki (Xxi) Lengthang (Xxii) Lhangum (Xxiii) Lhoujem (Xxiv) Lhouvun (Xxv) Lupheng (Xxvi) Mangjel (Xxvii) Misao (Xxviii) Riang (Xxix) Sairhem (Xxx) Selnam (Xxxi) Singson (Xxxii) Sitlhou (Xxxiii) Sukte (Xxxiv) Thado (Xxxv) Thangngeu (Xxxvi) Uibuh (Xxxvii) Vaiphei" if caste_updated == "Any Kuki Tribes,  including:" & state == "MEGHALAYA"
{txt}(1 real change made)

{com}. 
. replace caste_updated = "Any Kuki Tribes, including:  (I) Biate Or Biete (Ii) Changsan (Iii) Chongloi (Iv) Doungel (V) Gamalhou (Vi) Gangte (Vii) Guite (Viii) Hanneng (Ix) Haokip Or Haupit (X) Haolai (Xi) Hengna (Xii) Hongsungh (Xiii) Hrangkhwal Or Rangkhol (Xiv) Jongbe (Xv) Khawchung (Xvi) Khawathlang Or Khothalong (Xvii) Khelma (Xviii) Kholhou (Xix) Kipgen (Xx) Kuki (Xxi) Lengthang (Xxii) Lhangum (Xxiii) Lhoujem (Xxiv) Lhouvun (Xxv) Lupheng (Xxvi) Mangjel (Xxvii) Misao (Xxviii) Riang (Xxix) Sairhem (Xxx) Selnam (Xxxi) Singson (Xxxii) Sitlhou (Xxxiii) Sukte (Xxxiv) Thado (Xxxv) Thangngeu (Xxxvi) Uibuh (Xxxvii) Vaiphei" if caste_updated == "Any Kuki Tribes,  including:**" & state == "ASSAM"
{txt}(1 real change made)

{com}. 
. replace caste_updated = "Andamanese,   Chariar,   Chari,   Tabo,   Bo,   Yere, Kede,   Bea,   Balawa,   Bojigiyab,   Juwai" if caste_updated == "Andamanese,   Chariar,   Chari,   Kora,   Tabo,   Bo,   Yere, Kede,   Bea,   Balawa,   Bojigiyab,   Juwai,   Kol" 
{txt}(1 real change made)

{com}. 
. ******************************************************************************************************************************************
. * 3.1 fix the Naga sub-tribes in Nagaland, since these do not appear in the 1961 mother tongue tables
. ******************************************************************************************************************************************
. 
. 
. replace caste_updated = subinstr(caste_updated,"(ST)","",.)
{txt}(19 real changes made)

{com}. replace caste_updated = trim(caste_updated)
{txt}(8 real changes made)

{com}. levelsof caste_updated if caste_code > 1000, local(nagas) clean
{res}{txt}Angami Ao Chakhesang Chang Chirr Khiemnungan Konyak Lotha Makware Naga Phom Pochury Rengma Sangtam Sema Tikhir Viswerna Yimchaungre Zeliang

{com}. local naga Naga
{txt}
{com}. local nagas: list nagas - naga
{txt}
{com}. replace caste_updated = "Naga, " + subinstr("`nagas'"," ",", ",.) if caste_code == 505 & state == "NAGALAND"
{txt}(1 real change made)

{com}. drop if caste_code > 1000
{txt}(19 observations deleted)

{com}. gen year = 2011
{txt}
{com}. 
. ******************************************************************************************************************************************
. * 3 Appending 1961 and 2011 data 
. ******************************************************************************************************************************************
. 
. append using `1961_tribe'
{txt}{p 0 7 2}
(variable
{bf:state} was {bf:str25}, now {bf:str39} to accommodate using data's values)
{p_end}
{p 0 7 2}
(variable
{bf:total_p} was {bf:long}, now {bf:double} to accommodate using data's values)
{p_end}

{com}. replace state = proper(state)
{txt}(831 real changes made)

{com}. replace total_p = 0 if missing(total_p)
{txt}(123 real changes made)

{com}. 
. 
. ******************************************************************************************************************************************
. * 3.2 clean the tribe name variable and create tribe groups using the program defined above
. ******************************************************************************************************************************************
. 
. replace caste_updated = "generic tribes" if inlist(caste_updated,"scheduled tribes not known","unclassified")
{txt}(20 real changes made)

{com}. replace caste_updated = "any mizo (lushai) tribes" ///
>                 if inlist(caste_updated,"any mizo (lushai)tribes","any mizo(lushai) tribes","any mizo(lushai)tribes")
{txt}(0 real changes made)

{com}. 
. 
. drop if caste_updated == "all scheduled tribes"
{txt}(20 observations deleted)

{com}. replace caste_updated = proper(caste_updated)
{txt}(750 real changes made)

{com}. 
. gen excludepos = strpos(caste_updated,"Excluding")
{txt}
{com}. replace caste_updated = substr(caste_updated,1,excludepos-1) if excludepos > 0
{txt}(9 real changes made)

{com}. drop excludepos
{txt}
{com}. 
. replace caste_updated = "Gamit, Gamta, Gavit, Mavchi, Padvi" if strpos(caste_updated,"Gamit")>0
{txt}(7 real changes made)

{com}. * the above conforms with post-1976 definition of Gamit in Gujarat (drop a couple synonyms), and breaks the link between Bhils and Oraons
. 
. replace caste_updated = "Andamanese Including Chariar Or Chari, Tabo Or Bo, Yere, Kede, Bea, Balawa, Bojigiyab, Juwai" if caste_updated == "Andamanese Including Chariar Or Chari, Kora, Tabo Or Bo, Yere, Kede, Bea, Balawa, Bojigiyab, Juwai And Kol"
{txt}(1 real change made)

{com}. 
. qui clean_tribe caste_updated , gen(caste_clean)
{txt}
{com}. 
. ******************************************************************************************************************************************
. * 4. the following bit of code uses the program (defined above) create_tribe_groups to create tribal groups from 1961 data
. * specifically, it uses the mothertongue data for STs from Census 1961 to do this
. * this creates the file st_groups_with_states that has state, tribe and castegroup
. ******************************************************************************************************************************************
. 
. qui create_tribe_groups, castevar(caste_clean) statevar(state) popvar(total_p) gengroup(castegroup_1961_2011) gensynonym(tribe_synonyms_1961_2011)
{txt}
{com}. 
. replace castegroup_1961_2011 = "Any Kuki Tribes" if castegroup_1961_2011 == "Riang"
{txt}(18 real changes made)

{com}. 
. drop caste_clean
{txt}
{com}. label define CASTE_GROUPS_1961_2011 0 "All Scheduled Castes" 490 "Generic Castes" 500 "All Scheduled Tribes" 990 "Generic Tribes"
{txt}
{com}. encode castegroup_1961_2011, generate(castegroup_1961_2011_code) label(CASTE_GROUPS_1961_2011)
{txt}
{com}. 
. 
. save "../08_temp/st_groups_with_states" , replace 
{txt}{p 0 4 2}
file {bf}
../08_temp/st_groups_with_states.dta{rm}
saved
{p_end}

{com}. export excel "../03_processed/census scheduled tribe list with states and tribe groups.xlsx", firstrow(variables) nolabel replace
{res}{txt}file {bf:../03_processed/census scheduled tribe list with states and tribe groups.xlsx} saved

{com}. 
. 
. ******************************************************************************************************************************************
. * 5 Status check for tribe groups across 1961 and 2011 
. ******************************************************************************************************************************************
. 
. sort castegroup_1961_2011
{txt}
{com}. 
. 
. by castegroup_1961_2011: egen exception_1961 = max(year)
{txt}
{com}. distinct castegroup_1961_2011 if exception_1961 == 1961
{res}
{col 1}{text}{hline 22}{c TT}{hline 11}{hline 11}
{col 1}{text}                     {col 23}{c |}     total{col 35}  distinct
{res}{col 1}{text}{hline 22}{c +}{hline 11}{hline 11}
{res}{col 1}{text} castegroup_1961_2011{col 23}{c |}{result}        13{col 35}         9
{col 1}{text}{hline 22}{c BT}{hline 11}{hline 11}
{res}{txt}
{com}. 
. noi levelsof castegroup_1961_2011 if exception_1961 == 1961
{res}{txt}`"All Tribes Of N.E.F.A."' `"All Tribes Of North-East Frontier Agency"' `"Dafla"' `"Keer"' `"Korama"' `"Nat"' `"Pulayan"' `"Vaghri"' `"Vishavan"'

{com}. 
. /* 
> * 9 tribe groups of 1961 are left unmerged:
> "All Tribes Of N.E.F.A."' `"All Tribes Of North-East Frontier Agency"' `"Dafla"' `"Keer"' `"Korama"' `"Nat"' `"Pulayan"' `"Vaghri"' "Vishavan"
> */
. 
. 
. by castegroup_1961_2011: egen exception_2011 = min(year)
{txt}
{com}. distinct castegroup_1961_2011 if exception_2011 == 2011
{res}
{col 1}{text}{hline 22}{c TT}{hline 11}{hline 11}
{col 1}{text}                     {col 23}{c |}     total{col 35}  distinct
{res}{col 1}{text}{hline 22}{c +}{hline 11}{hline 11}
{res}{col 1}{text} castegroup_1961_2011{col 23}{c |}{result}       132{col 35}       124
{col 1}{text}{hline 22}{c BT}{hline 11}{hline 11}
{res}{txt}
{com}. 
. noi levelsof castegroup_1961_2011 if exception_2011 == 2011
{res}{txt}`"Adi"' `"Adi Bori"' `"Adi Gallong"' `"Adi Minyong"' `"Adi Padam"' `"Adi Pasi"' `"Adiramo"' `"Ashing"' `"Bagi"' `"Bakarwal"' `"Balti"' `"Bangni"' `"Bhotia"' `"Bogum"' `"Bokar"' `"Bomdo"' `"Bori"' `"Bot"' `"Brokpa"' `"Buksa"' `"But Monpa"' `"Changpa"' `"Cholanaickan"' `"Dalbing"' `"Darok Tangsa"' `"Degaru"' `"Dirang Monpa"' `"Domba"' `"Dubla Halpati"' `"Garra"' `"Gawda"' `"Haisa Tangsa"' `"Havi Tangsa"' `"Hill Miri"' `"Hotang Tangsa"' `"Hrusso"' `"Jannsari"' `"Jugli"' `"Kaman"' `"Karimpalan"' `"Karka"' `"Kemsing Tangsa"' `"Khamba"' `"Khamiyang"' `"Kharam"' `"Koch"' `"Komkar"' `"Korang Tangsa"' `"Laju"' `"Langkai Tangsa"' `"Libo"' `"Lichi Tangsa"' `"Liju Nocte"' `"Limboo"' `"Limbu Subba"' `"Lish Monpa"' `"Longchang Tangsa"' `"Longin Tangsa"' `"Longphi Tangsa"' `"Longri Tangsa"' `"Longsang Tangsa"' `"Lowang Tangsa"' `"Mala Panickar"' `"Mala Vettuvan"' `"Mavilan"' `"Meyor"' `"Miji"' `"Millang"' `"Miniyong"' `"Moglum Tangsa"' `"Mon"' `"Monpa"' `"Morang Tangsa"' `"Mossang Tangsa"' `"Muktum"' `"Nakkala"' `"Namsang Tangsa"' `"Ngimong Tangsa"' `"Nishang"' `"Nissi"' `"Nocte"' `"Nonong"' `"Nyishi"' `"Padam"' `"Pailibo"' `"Panchen Monpa"' `"Pangi"' `"Parahiya"' `"Pasi"' `"Patari"' `"Phong Tangsa"' `"Ponthai Nocte"' `"Purigpa"' `"Raji"' `"Ramo"' `"Rangai Tangsa"' `"Rongrang Tangsa"' `"Sanke Tangsa"' `"Simong"' `"Sippi"' `"Siram"' `"Sulung"' `"Sulung Bangni"' `"Tagin"' `"Tagin Bangni"' `"Taisen Tangsa"' `"Tamang"' `"Tangam"' `"Tangsa"' `"Taram"' `"Tarao"' `"Tawang Monpa"' `"Ten Kurumban"' `"Thachanadan"' `"Thai Khampi"' `"Tharu"' `"Tikhak Tangsa"' `"Tutcha Nocte"' `"Velip"' `"Vetta Kuruman"' `"Wancho"' `"Yobin"' `"Yongkuk Tangsa"' `"Yougli Tangsa"'

{com}. 
. 
. /* 124 tribe groups are found only in 2011 
> 
> "Adi"' `"Adi Bori"' `"Adi Gallong"' `"Adi Minyong"' `"Adi Padam"' `"Adi Pasi"' `"Adiramo"' `"Ashing"' ` "Bagi"' `"Bakarwal"' `"Balti"' `"Bangni"' `"Bhotia"' `"Bogum"' `"Bokar"' `"Bomdo"' `"Bori"' `"Bot"' `"Brokpa"' `"Buksa"' `"But Monpa"' `"Changpa"' `"Cholanaickan"' `"Dalbing"' `"Darok Tangsa"' `"Degaru"' `"Dirang Monpa"' `"Domba"' `"Dubla Halpati"' `"Garra"' `"Gawda"' `"Haisa Tangsa"' `"Havi Tangsa"' `"Hill Miri"' `"Hotang Tangsa"' `"Hrusso"' `"Jannsari"' `"Jugli"' `"Kaman"' `"Karimpalan"' `"Karka"' `"Kemsing Tangsa"' `"Khamba"' `"Khamiyang"' `"Kharam"' `"Koch"' `"Komkar"' `"Korang Tangsa"' `"Laju"' `"Langkai Tangsa"' `"Libo"' `"Lichi Tangsa"' `"Liju Nocte"' `"Limboo"' `"Limbu Subba"' `"Lish Monpa"' `"Longchang Tangsa"' `"Longin Tangsa"' `"Longphi Tangsa"' `"Longri Tangsa"' `"Longsang Tangsa"' `"Lowang Tangsa"' `"Mala Panickar"' `"Mala Vettuvan"' `"Mavilan"' `"Meyor"' `"Miji"' `"Millang"' `"Miniyong"' `"Moglum Tangsa"' `"Mon"' `"Monpa"' `"Morang Tangsa"' `"Mossang Tangsa"' `"Muktum"' `"Nakkala"' `"NamsangTangsa"' `"Ngimong Tangsa"' `"Nishang"' `"Nissi"' `"Nocte"' `"Nonong"' `"Nyishi"' `"Padam"' `"Pailibo"' `"Panchen Monpa"' `"Pangi"' `"Parahiya"' `"Pasi"' `"Patari"' `"Phong Tangsa"' `"Ponthai Nocte"' `"Purigpa"' `"Raji"' `"Ramo"' `"Rangai Tangsa"' `"Rongrang Tangsa"' `"Sanke Tangsa"' `"Simong"' `"Sippi"' `"Siram"' `"Sulung"' `"Sulung Bangni"' `"Tagin"' `"Tagin Bangni"' `"Taisen Tangsa"' `"Tamang"' `"Tangam"' `"Tangsa"' `"Taram"' `"Tarao"' `"Tawang Monpa"' `"Ten Kurumban"' `"Thachanadan"' `"Thai Khampi"' `"Tharu"' `"Tikhak Tangsa"' `"Tutcha Nocte"' `"Velip"' `"Vetta Kuruman"' `"Wancho"' `"Yobin"' `"Yongkuk Tangsa"' `"Yougli Tangsa"'
> 
> */
. 
. /* 
> 
> Discussion on unmerged tribes:
> 
> 1961 Unmerged Tribes
> --------------------
> 
> These 5 tribes have been checked, and will remain unmatched for the following reasons:
> 
> 1. Keer is a tribe scheduled in parts of Madhya Pradesh. They have zero returns in 2011.
> 2. Korama are a community in Karnataka that were shifted from the ST list to the SC list in 1976
> 3. Nat are a small community in Madhya Pradesh in 1961, but only figure as SCs in that state 2011, not STs
> 4. Pulayan were a large tribe in Malabar district of Kerala, but were included as SC in other parts of Kerala in 1976, this was rationalized and Pulayan were removed from ST list of Kerala and scheduled as an SC all over the state. They also had a small presence in Tamil Nadu, and there too they were earlier in both SC and ST lists (for different parts of the state) and in 1976 moved to SC list only
> 5. Vaghri are a small tribe delimited only in the Kutch region of Gujarat, and have nil returns in 2011
> 6. Vishavan is a tribe only in Kerala and has nil returns in 1961, remains unmatched since it was deleted from the list of S.Ts in 1981 in Kerala due to having no population in 1971 census (Source: PRIMARY CENSUS ABSTRACT FOR SCHEDULED CASTES AND SCHEDULED TRIBES, Series 10 Kerala 1981)
> 7. all tribes of n.e.f.a : removed from Assam and Nagaland in 1971
> 8. all tribes of north east frontier agency : removed from Assam and Nagaland in 1971
> 9. Dafla(In Nagaland and Assam): This tribe was listed as ST in Assam by the Constitution (Scheduled Tribes) Order, 1950, After the creation of Arunachal Pradesh as a State, "Dafla" was mentioned in the list of ST in Arunachal Pradesh by the North-Eastern Areas (Reorganisation) Act, 1971.
> The Constitution (Nagaland) Scheduled Tribes Order, 1970 (Annex 3.V) specified only five tribes in namely- (i) Naga, (ii) Kuki, (iii) Kachari, (iv) Mikir, and (v) Garo.
> 
> 2011 Unmerged Tribes
> --------------------
> 
> These 124 tribes have been checked, and will remain unmatched for the following reasons:
> 
> 1-9.    9 are tribes scheduled in Jammu & Kashmir where scheduling had not yet happened in 1961 
>                 [Bakarwal; Balti; Bot; Brokpa; Changpa; Garra; Mon; Purigpa; Sippi]
> 10-13.  4 are tribes scheduled in Uttarakhand, where scheduling had not happened in 1961 
>                 [Bhotia, Buksa, Jannsari, Raji] 
> 14-21.  8 are tribes newly scheduled in Kerala in 2002 [Cholanaickan; Karimpalan; Mala Panickar; Mala Vettuvan; Mavilan; Ten Kurumban; Thachanadan; Vetta Kuruman;]
> 22.             Nakkala was newly scheduled in Andhra Pradesh in 2002
> 23-24.  2 are tribes newly scheduled in Manipur in 2002 [Kharam; Tarao]
> 25-26.  2 are tribes newly scheduled in West Bengal in 2002 [Limbu Subba; Tamang]
> 27-28.  2 are tribes newly scheduled in Goa in 2002 [Gawda; Velip]
> 29-30.  2 are tribes newly scheduled in Uttar Pradesh in 2002 [Parahiya; Patari]
> 31.             2 tribes were newly scheduled in Sikkim in 2002 [Limboo; Tamang] (Tamang already counted as new in WB above)
> 32.             Domba was newly scheduled in Himachal Pradesh in 2002
> 35.     Dubla Halpati are scheduled in Goa, and in Daman & Diu, for which no SC/ST data was collected in the census of 1961
> 39.             Koch are STs of Meghalaya  that are not listed in Assam for 1961
> 42-134. The remaining 91 tribes are scheduled in Arunachal Pradesh only, for which we have been unable to obtain Census 1961 data
>                 [Adi; Adi Bori; Adi Gallong; Adi Minyong; Adi Padam; Adi Pasi; Adiramo; Ashing; Bagi; Bangni; Bogum; Bokar; Bomdo; Bori; But Monpa; Dalbing; Darok Tangsa; Degaru; Dirang Monpa; Haisa Tangsa; Havi Tangsa; Hill Miri; Hotang Tangsa; Hrusso; Jugli; Kaman; Karka; Kemsing Tangsa; Khamba; Khamiyang; Komkar; Korang Tangsa; Laju; Langkai Tangsa; Libo; Lichi Tangsa; Liju Nocte; Lish Monpa; Longchang Tangsa; Longin Tangsa; Longphi Tangsa; Longri Tangsa; Longsang Tangsa; Lowang Tangsa; Meyor; Miji; Millang; Miniyong; Moglum Tangsa; Monpa; Morang Tangsa; Mossang Tangsa; Muktum; Namsang Tangsa; Ngimong Tangsa; Nishang; Nissi; Nocte; Nonong; Nyishi; Padam; Pailibo; Panchen Monpa; Pangi;  Pasi; Phong Tangsa; Ponthai Nocte; Ramo; Rangai Tangsa; Rongrang Tangsa; Sanke Tangsa; Sherdukpen; Simong; Siram; Sulung; Sulung Bangni; Tagin; Tagin Bangni; Taisen Tangsa; Tangam; Tangsa; Taram; Tawang Monpa; Thai Khampi; Tharu; Tikhak Tangsa; Tutcha Nocte; Wancho; Yobin; Yongkuk Tangsa; Yougli Tangsa]
> */
. 
. ******************************************************************************************************************************************
. * 6 Creating dataset retaining only tribe groups and tribe group codes 
. ******************************************************************************************************************************************
. 
. use "../08_temp/st_groups_with_states" , clear
{txt}
{com}. 
. collapse (sum) total_p, by(castegroup_1961_2011 castegroup_1961_2011_code state state_code caste_updated caste caste_code year)
{res}{txt}
{com}. keep castegroup_1961_2011 castegroup_1961_2011_code state state_code caste_updated caste caste_code year 
{txt}
{com}. 
. noi distinct castegroup_1961_2011 castegroup_1961_2011_code
{res}
{col 1}{text}{hline 27}{c TT}{hline 11}{hline 11}
{col 1}{text}                          {col 28}{c |}     total{col 40}  distinct
{res}{col 1}{text}{hline 27}{c +}{hline 11}{hline 11}
{res}{col 1}{text}      castegroup_1961_2011{col 28}{c |}{result}      1460{col 40}       391
{col 1}{text} castegroup_1961_2011_code{col 28}{c |}{result}      1460{col 40}       391
{col 1}{text}{hline 27}{c BT}{hline 11}{hline 11}
{res}{txt}
{com}. 
. save "../08_temp/st_groups_merged_1961_2011", replace
{txt}{p 0 4 2}
file {bf}
../08_temp/st_groups_merged_1961_2011.dta{rm}
saved
{p_end}

{com}. 
. 
. project, creates("../08_temp/st_groups_with_states.dta")
{txt}project version2_tribe_language > do-file creates: {res}"08_temp/st_groups_with_states.dta" filesig(2431922258:3904145){txt}

{com}. project, creates("../03_processed/census scheduled tribe list with states and tribe groups.xlsx")
{txt}project version2_tribe_language > do-file creates: {res}"03_processed/census scheduled tribe list with states and tribe groups.xlsx" filesig(710066069:128710){txt}

{com}. project, creates("../08_temp/st_groups_merged_1961_2011.dta")
{txt}project version2_tribe_language > do-file creates: {res}"08_temp/st_groups_merged_1961_2011.dta" filesig(409275321:2250223){txt}

{com}. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
{txt}end of do-file
      name:  {res}plog_786
       {txt}log:  {res}/Users/sreyamajumder/Dropbox/sreya_majumder/tribelanguage_2020 sreya/02_scripts/1.06_st_1961_2011_groups_automated.smcl
  {txt}log type:  {res}smcl
 {txt}closed on:  {res}16 Nov 2021, 12:34:48
{txt}{.-}
{smcl}
{txt}{sf}{ul off}